// set html so 1 rem is 10px
// html { font-size: 62.5%}

// Rem output with px fallback
// @mixin font-size($sizeValue: 1) {
//   font-size: ($sizeValue * .1) + px;
//   font-size: $sizeValue + rem;
// }

// p {
//   @include font-size(13);
// }

// @function calculateRem($size) {
//   $remSize: $size / 16px;
//   @return #{$remSize}rem;
// }

// @mixin fontSize($size) {
//   font-size: $size; //Fallback in px
//   font-size: calculateRem($size);
// }

$pixelBase : 16;
@mixin font-size($sizeValue: 1.6){
  font-size: ($sizeValue * 1) + px;
  font-size: (($sizeValue * 1) / $pixelBase)  + rem;
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16px;
@mixin rem($property, $px-values) {
// Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
// Print the first line in pixel values
  #{$property}: $px-values;
// If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
  // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
    // If the value is zero or a string or a color, return unchanged input
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
  // Return the property and its list of converted values
    #{$property}: $rem-values; } }

// Center block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Clearfix
@mixin clearfix() {
    content: "";
    display: table;
    table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
    clear: both;
}

@mixin linx ($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;
    }
    &:active {
      color: $active;
    }
  }
}
// @include linx($colorBrightOne, $colorBrightOne, $colorBrightOne, $colorBrightOne);


@mixin breakpoint($point) {
   @if $point == desktop {
     @media (min-width: 70em) { @content ; } // 1120
  }
   @else if $point == laptop {
     @media (max-width: 70em) { @content ; } // 1024
  }
    @else if $point == tablet {
     @media (max-width: 64em) { @content ; } // 800
  }
   @else if $point == phablet {
     @media (max-width: 50em)  { @content ; } // 600
  }
  @else if $point == mobileonly {
     @media (max-width: 37.5em)  { @content ; }

  }
}

// @include breakpoint(laptop) {
//   background-position-x: 120%;
// }

